<div class="cm-checkout">
    
<div class="t4s-container">
    
<form method="post" action="/cart" novalidate class="cart-delivery-form">
  <div class="cart-left">
    <!-- Contact -->
    <div class="contact-section">
      <h2>Contact</h2>
      <input type="email" name="contact[email]" value="{{ customer.email | default: '' }}" placeholder="Email or mobile phone number" required>
    </div>

    <!-- Delivery -->
    <div class="delivery-section">
      <h2>Delivery</h2>


      <div class="delivery-grid">



      <div class="input-row">
      <label for="country">Country/Region</label>
       <select
            id="ShippingCountry_{{ idShip }}"
            name="country"
            data-default="{% if customer %}{{ customer.default_address.country }}{% elsif se_stts.ship_df_country != '' %}{{ se_stts.ship_df_country | escape }}{% endif %}"
          >
            {{- country_option_tags -}}
          </select>
      </div>

      <div class="input-row half-width">
        <input type="text" name="shipping_address[first_name]" placeholder="First name (optional)" value="{{ customer.first_name }}">
      </div>

      <div class="input-row half-width">
        <input type="text" name="shipping_address[last_name]" placeholder="Last name" value="{{ customer.last_name }}">

      </div>

      <div class="input-row">
          <input type="text" name="shipping_address[address1]" placeholder="Address" required>
      </div>
      <div class="input-row">
          <input type="text" name="shipping_address[address2]" placeholder="Apartment, suite, etc. (optional)">
      </div>
      
     

        <div class="input-row half-width">
        <input type="text" name="shipping_address[city]" placeholder="City" required>
        </div>

         <div class="input-row half-width">
        <input id="cityInput" type="text" name="shipping_address[zip]" placeholder="Postal code" required>
        </div>

      <label class="save_info"><input type="checkbox" name="save_info"> Save this information for next time</label>
            </div>
    </div>

    <!-- Shipping Method -->
    <div class="shipping-method">
     
    </div>
  </div>

  <!-- Cart Summary Sidebar -->
  <div class="cart-right">
    <ul class="cart-items">
      {% for item in cart.items %}
        <li class="cart-item">
            <div class="img-launch">
                <span>{{ item.quantity }}</span>
                <img src="{{ item.image | image_url: width: 80 }}" alt="{{ item.title }}">
            </div>
          <div class="cart-data">
            <div class="cm-price">
                <p>{{ item.product.title }}</p>
                <p class="cart-varriant_title">{{ item.variant.title }}</p>
                </div>
                <p>{{ item.final_line_price | money }}</p>
          </div>
        </li>
      {% endfor %}
    </ul>

    <div class="cart-totals">
      <ul>
        <li>
            <strong>Subtotal</strong>
            <span>{{ cart.total_price | money }}</span>
        </li>
        <li>
            <strong>Shipping</strong>
            <span id="cartShipping">FREE</span>
        </li>
        <li>
            <strong>Total</strong>
            <span id="csFinal">{{ cart.total_price | money_with_currency }}</span>
        </li>
      </ul>
      
    </div>

    {%  render 'apple-pay' %}
  </div>

  
</form>
</div>

</div>


<style>

.cm-checkout form.cart-delivery-form {
    display: grid;
    grid-template-columns: 2fr 1.3fr;
    gap: 56px;
}

.cm-checkout form.cart-delivery-form .cart-left > div {
    margin-bottom: 40px;
}

.cm-checkout h2 {
    font-size: 21px;
    margin-bottom: 12px;
}

.delivery-grid {
    display: flex;
    flex-flow: row wrap;
    gap: 16px;
}

.delivery-grid .input-row {
    width: 100%;
}

.delivery-grid .input-row.half-width {
    width: calc(100% /2 - 8px);
}

.cm-checkout input ,.cm-checkout select {
    border: 1px solid rgb(0, 0, 0) !important;
    border-radius: 8px !important;
    min-height: 50px;
}

.cm-checkout input[type="radio"] {
    appearance: auto !important;
    appearance: auto !important;
}

.cm-checkout ul.cart-items {
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 14px;
}

.cm-checkout ul.cart-items li.cart-item {
    display: flex;
    align-items: center;
    gap: 14px;
}

.cm-checkout ul.cart-items li.cart-item .img-launch {
    position: relative;
    width: 64px;
    height: 64px;
        min-width: 64px;
}

.cm-checkout ul.cart-items li.cart-item .img-launch span {
    position: absolute;
    top: -6px;
    right: -5px;
    background-color: grey;
    color: white;
    font-size: 10px;
    display: inline-flex;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    justify-content: center;
    align-items: center;
}

.cm-checkout ul.cart-items {
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 14px;
}

.cm-checkout ul.cart-items li.cart-item {
    display: flex;
    align-items: center;
    gap: 14px;
}

.cm-checkout ul.cart-items li.cart-item .img-launch {
       position: relative;
    width: 64px;
    height: 64px;
    min-width: 64px;
    border-radius: 8px;
    border: 1px solid #80808066;
}

.cm-checkout ul.cart-items li.cart-item .img-launch span {
    position: absolute;
    top: -6px;
    right: -5px;
    background-color: grey;
    color: white;
    font-size: 10px;
    display: inline-flex;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    justify-content: center;
    align-items: center;
}

.cm-checkout ul.cart-items li.cart-item .cart-data {
    display: flex;
    gap: 11px;
    justify-content: space-between;
    width: 100%;
}

.cm-checkout ul.cart-items li.cart-item .cart-data p {
    margin: 0;
}

.cm-checkout ul.cart-items li.cart-item .img-launch img {
       width: 100%;
    height: 100%;
    object-fit: contain;
    object-position: center;
    border-radius: 8px;
}

.t4s-results__rates input[type="radio"] {
    appearance: auto !important;
}

.delivery-section label.save_info {
    display: flex;
    align-items: center;
    gap: 10px;
    order: 500;
}

.delivery-section label.save_info input[type="checkbox"] {
    min-height: unset;
}

.shipping-method ul.t4s-shipping-rates-list {
    padding: 0;
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 14px;
}

.shipping-method ul.t4s-shipping-rates-list li > label {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 20px;
    border: 1px solid #8080805e;
    border-radius: 8px;
    cursor: pointer;
}

.shipping-method ul.t4s-shipping-rates-list span.shipping-option {
    display: flex;
    flex-direction: column;
}

.shipping-method span.shipping-price {
    margin-left: auto;
    font-weight: 600;
}

.shipping-method ul.t4s-shipping-rates-list li > label input[type="radio"] {
    width: auto !important;
    height: auto !important;
    min-height: auto !important;
}

.cm-checkout .cart-totals {
    margin-top: 10px;
}

.cm-checkout .cart-totals ul {
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 6px;
}

.cm-checkout .cart-totals ul li {
    display: flex;
    justify-content: space-between;
    gap: 10px;
}

.cm-checkout .cart-totals ul li:last-of-type {
    margin-top: 20px;
}

.cm-checkout .cart-totals ul li:last-of-type strong, .cm-checkout .cart-totals ul li:last-of-type span {
    font-size: 20px;
    font-weight: 600;
}

@media only screen and (max-width: 1200px) {
  .cm-checkout form.cart-delivery-form {
    grid-template-columns: 1fr;
    gap: 20px;
    padding-bottom: 30px;
}
}

</style>



<script>
window.addEventListener('DOMContentLoaded', function () {
    const provinceSelect = document.getElementById('ShippingCountry_');
    provinceSelect.value = 'United States';

    const CountrySelector = document.getElementById("ShippingCountry_");
    const CountrySelectorhidden = document.getElementById("ShippingCountry_main_cart");

    CountrySelector.addEventListener("change", function () {
      CountrySelectorhidden.value = CountrySelector.value;
    });

    const countrySelect = document.getElementById("ShippingCountry_");

   countrySelect.addEventListener("change", function () {
  const selectedOption = countrySelect.options[countrySelect.selectedIndex];
  const provincesData = selectedOption.getAttribute("data-provinces");
  const deliveryGrid = document.querySelector(".delivery-grid");

  // Remove old province dropdown if any
  const existingProvinceDropdown = document.getElementById("ShippingProvince_dynamic");
  if (existingProvinceDropdown) {
    existingProvinceDropdown.remove();
  }

  try {
    const provinces = JSON.parse(provincesData);

    if (provinces.length > 0) {
      // Create new dynamic province select
      const provinceSelect = document.createElement("select");
      provinceSelect.id = "ShippingProvince_dynamic";
      provinceSelect.name = "province";
      provinceSelect.className = "province-select"; // optional

      provinces.forEach(([value, label]) => {
        const option = document.createElement("option");
        option.value = value;
        option.textContent = label;
        provinceSelect.appendChild(option);
      });

      // Append to delivery grid
      deliveryGrid.appendChild(provinceSelect);

      // Sync with hidden input
      const ShippingProvince = document.getElementById("ShippingProvince_dynamic");
      const ShippingProvincehidden = document.getElementById("ShippingProvince_main_cart");

      // Initial sync (first province)
      if (ShippingProvince.options.length > 0) {
        const firstValue = ShippingProvince.value;
        const firstLabel = ShippingProvince.options[ShippingProvince.selectedIndex].text;

        ShippingProvincehidden.innerHTML = "";
        const firstOption = document.createElement("option");
        firstOption.value = firstValue;
        firstOption.textContent = firstLabel;
        ShippingProvincehidden.appendChild(firstOption);
      }

      // On change, update hidden select
      ShippingProvince.addEventListener("change", function () {
        const selectedValue = ShippingProvince.value;
        const selectedLabel = ShippingProvince.options[ShippingProvince.selectedIndex].text;

        // Clear all existing options in hidden select
        ShippingProvincehidden.innerHTML = "";

        // Add new selected option
        const newOption = document.createElement("option");
        newOption.value = selectedValue;
        newOption.textContent = selectedLabel;
        newOption.selected = true;

        ShippingProvincehidden.appendChild(newOption);
      });
    }
  } catch (e) {
    console.error("Invalid province data:", e);
  }
});

const cityInput = document.getElementById('cityInput');
  const cityCopy = document.getElementById('ShippingZip_main_cart');
  const estimateButton = document.querySelector('button[data-action="estimate-shipping"]');

  cityInput.addEventListener('keyup', () => {
    cityCopy.value = cityInput.value;
    estimateButton.click();
  });


  
});
</script>